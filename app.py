import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import base64

# Configuration de la page
st.set_page_config(page_title="Renouvellement Pack Informatique - MTFP", layout="wide")

# Fonction pour charger les donn√©es
@st.cache_data
def charger_donnees(fichier):
    df = pd.read_csv(fichier)
    df.replace("illisible", np.nan, inplace=True)
    return df

# Fonction pour calculer l'√¢ge
def calculer_age(df, colonne_date, nouvelle_colonne="√Çge de l'√©quipement"):
    df = df.copy()
    df[nouvelle_colonne] = pd.to_datetime(df[colonne_date], errors="coerce")
    df[nouvelle_colonne] = datetime.now().year - df[nouvelle_colonne].dt.year
    return df

# Fonction pour pr√©dire le renouvellement
def predire_renouvellement(df):
    df = df.copy()
    def besoin_renouvellement(row):
        if pd.isna(row.get("√Çge de l'√©quipement")) or pd.isna(row.get("Cat√©gorie d'utilisateur")):
            return "Inconnu"
        if row["√Çge de l'√©quipement"] >= 4:
            return "Oui"
        else:
            return "Non"
    df["√Ä renouveler"] = df.apply(besoin_renouvellement, axis=1)
    return df

# Fonction d'export CSV
def telecharger_csv(df):
    csv = df.to_csv(index=False).encode()
    b64 = base64.b64encode(csv).decode()
    href = f'<a href="data:file/csv;base64,{b64}" download="donnees_exportees.csv">üì• T√©l√©charger les r√©sultats</a>'
    return href

# Fonction d'entra√Ænement mod√®le ML
def entrainer_modele(df):
    df_modele = df[["√Çge de l'√©quipement", "Cat√©gorie d'utilisateur", "√Ä renouveler"]].dropna()
    df_modele = df_modele.copy()
    df_modele["Cat√©gorie d'utilisateur"] = df_modele["Cat√©gorie d'utilisateur"].astype("category").cat.codes
    df_modele["√Ä renouveler"] = df_modele["√Ä renouveler"].map({"Oui": 1, "Non": 0})

    X = df_modele[["√Çge de l'√©quipement", "Cat√©gorie d'utilisateur"]]
    y = df_modele["√Ä renouveler"]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    modele = RandomForestClassifier(n_estimators=100, random_state=42)
    modele.fit(X_train, y_train)
    y_pred = modele.predict(X_test)
    rapport = classification_report(y_test, y_pred, output_dict=True)
    return modele, rapport

# Interface utilisateur principale
st.title("üíª Syst√®me intelligent de gestion du renouvellement des packs informatiques - MTFP")

# Chargement des donn√©es
fichier = st.sidebar.file_uploader("üìÅ Importer un fichier CSV", type="csv")

if fichier is not None:

    if "df" not in st.session_state:
        st.session_state.df = charger_donnees(fichier)

    df = st.session_state.df

    # Choix de l'action dans la barre lat√©rale
    menu = st.sidebar.radio("üß≠ Menu", [
        "Aper√ßu des donn√©es",
        "Nettoyage et Pr√©traitement",
        "Statistiques descriptives",
        "D√©tection des appareils √† renouveler",
        "Mod√®le de pr√©diction (ML)",
        "Export des donn√©es"
    ])

    if menu == "Aper√ßu des donn√©es":
        st.subheader("üîç Donn√©es brutes import√©es")
        st.dataframe(df)

    elif menu == "Nettoyage et Pr√©traitement":
        colonne_date = st.selectbox("üìÖ S√©lectionner la colonne de date d'achat", df.columns)
        df = calculer_age(df, colonne_date)
        st.session_state.df = df  # Mise √† jour du dataframe dans session_state
        st.success("‚úÖ √Çge de l‚Äô√©quipement calcul√©")
        st.dataframe(df.head())

    elif menu == "Statistiques descriptives":
        st.subheader("üìä Statistiques descriptives")
        st.write(df.describe(include='all'))
        st.write("Distribution de l'√¢ge des √©quipements")
        if "√Çge de l'√©quipement" in df.columns:
            fig, ax = plt.subplots()
            sns.histplot(df["√Çge de l'√©quipement"].dropna(), bins=10, kde=True, ax=ax)
            st.pyplot(fig)
        else:
            st.warning("Veuillez d‚Äôabord calculer l'√¢ge de l'√©quipement dans la section Nettoyage et Pr√©traitement.")

    elif menu == "D√©tection des appareils √† renouveler":
        if "√Çge de l'√©quipement" not in df.columns:
            st.warning("Veuillez d‚Äôabord calculer l'√¢ge de l'√©quipement dans la section Nettoyage et Pr√©traitement.")
        else:
            df = predire_renouvellement(df)
            st.session_state.df = df
            st.subheader("üìå Appareils √† renouveler")
            st.dataframe(df[df["√Ä renouveler"] == "Oui"])
            st.metric("Nombre d'appareils √† renouveler", df["√Ä renouveler"].value_counts().get("Oui", 0))

    elif menu == "Mod√®le de pr√©diction (ML)":
        if "√Çge de l'√©quipement" not in df.columns:
            st.warning("Veuillez d‚Äôabord calculer l'√¢ge de l'√©quipement dans la section Nettoyage et Pr√©traitement.")
        else:
            st.subheader("üß† Pr√©diction avec mod√®le de Machine Learning")
            df = predire_renouvellement(df)
            st.session_state.df = df
            modele, rapport = entrainer_modele(df)
            st.success("‚úÖ Mod√®le entra√Æn√©")
            st.json(rapport)

    elif menu == "Export des donn√©es":
        if "√Ä renouveler" in df.columns:
            st.markdown(telecharger_csv(df), unsafe_allow_html=True)
        else:
            st.warning("Veuillez d‚Äôabord ex√©cuter la d√©tection de renouvellement.")
else:
    st.info("üìÅ Importez un fichier CSV pour commencer.")
